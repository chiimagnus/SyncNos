name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'Resource/ChangeLog.md'

jobs:
  release:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if new version exists
        id: check_version
        run: |
          CHANGELOG_FILE="Resource/ChangeLog.md"

          # 获取当前版本的 changelog
          CURRENT_CONTENT=$(cat "$CHANGELOG_FILE")

          # 提取当前版本号
          CURRENT_VERSION=$(echo "$CURRENT_CONTENT" | grep "^## " | head -n 1 | sed 's/^## //' | tr -d ' ')

          # 验证版本号格式
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not extract version from changelog"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Current version: $CURRENT_VERSION"

          # 尝试获取上一个版本的 changelog（处理首次推送）
          # 使用相对 commit 数而不是 remote fetch
          COMMIT_COUNT=$(git log --oneline -n 2 2>/dev/null | wc -l)
          if [ "$COMMIT_COUNT" -eq 2 ]; then
            # 有历史记录（至少有2个commit），获取上一个版本
            PREVIOUS_CONTENT=$(git show HEAD~1:$CHANGELOG_FILE 2>/dev/null || echo "")
            # 使用相同的版本格式匹配
            PREVIOUS_VERSION=$(echo "$PREVIOUS_CONTENT" | grep "^## v[0-9]" | head -n 1 | sed 's/^## //' | tr -d ' ')
          else
            # 首次推送，没有上一个版本
            PREVIOUS_VERSION=""
          fi

          echo "Previous version: $PREVIOUS_VERSION"

          # 检查版本号是否不同（说明有新版本）
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            # 提取当前版本的 release notes
            # 跳过第一行（版本号），直到下一个版本或文件结束或遇到 --- 分隔符
            RELEASE_NOTES=$(echo "$CURRENT_CONTENT" | awk '
              /^## v[0-9]/ {
                if (header) { exit }
                if (NR > 1) { header=1 }
                next
              }
              /^---$/ { exit }
              header && NF { print }
            ' | sed '/^$/d')  # 移除空行

            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            {
              echo "release_notes<<EOF"
              echo "$RELEASE_NOTES"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            echo "has_new_version=true" >> $GITHUB_OUTPUT
            echo "New version detected: $CURRENT_VERSION"
          else
            echo "No new version detected (version unchanged)"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        if: steps.check_version.outputs.has_new_version == 'true'
        id: check_existing
        run: |
          VERSION="${{ steps.check_version.outputs.version }}"

          if [ -z "$VERSION" ]; then
            echo "Error: No version found"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Checking if release '$VERSION' already exists..."

          # 使用 GitHub API 检查是否已存在该版本的 release
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")

          if echo "$RESPONSE" | grep -q '"message"' | grep -q 'Not Found'; then
            echo "Release does not exist, can create"
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "Release $VERSION already exists, skipping"
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_version.outputs.has_new_version == 'true' && steps.check_existing.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_version.outputs.version }}
          name: ${{ steps.check_version.outputs.version }}
          body: ${{ steps.check_version.outputs.release_notes }}
          draft: false
          prerelease: false
